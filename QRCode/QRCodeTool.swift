//
//  QRCodeTool.swift
//  QRCode
//
//  Created by he on 2017/4/1.
//  Copyright ¬© 2017Âπ¥ he. All rights reserved.
//

import UIKit
import AVFoundation

typealias QRResultBlock = (_ strs: [String]) -> ()

class QRCodeTool: NSObject {

    /// Âçï‰æã
    public static let shared: QRCodeTool = QRCodeTool()
    
    private override init() {
        super.init()
    }
    
    /// ËæìÂÖ•ËÆæÂ§á
    fileprivate lazy var input: AVCaptureDeviceInput? = {
        
        let device = AVCaptureDevice.defaultDevice(withMediaType: AVMediaTypeVideo)
        
        return try? AVCaptureDeviceInput(device: device)
    }()
    
    /// ËæìÂá∫
    fileprivate lazy var output: AVCaptureMetadataOutput = {
        
        var captureMetaDataOutput = AVCaptureMetadataOutput()
        // ËÆæÁΩÆÂÖÉÊï∞ÊçÆËæìÂá∫Â§ÑÁêÜ‰ª£ÁêÜ
        captureMetaDataOutput.setMetadataObjectsDelegate(self, queue: DispatchQueue.main)
        
        return captureMetaDataOutput
    }()
    
    /// ‰ºöËØù
    fileprivate lazy var session: AVCaptureSession = AVCaptureSession()
    
    /// È¢ÑËßàÂõæÂ±Ç
    fileprivate lazy var previewLayer: AVCaptureVideoPreviewLayer = AVCaptureVideoPreviewLayer(session: self.session)
    
    
    fileprivate var resultBlock: QRResultBlock?
}

extension QRCodeTool {
    
    /// ÂºÄÂßãÊâ´Êèè
    ///
    /// - Parameters:
    ///   - inView: Â±ïÁ§∫ËßÜÂõæ
    ///   - result: Êâ´ÊèèÁªìÊûú
    public func begainScan(inView: UIView, result: @escaping QRResultBlock) {
        
        resultBlock = result
        
        if session.canAddInput(input) && session.canAddOutput(output) {
            session.addInput(input)
            session.addOutput(output)
        }
        
        //ËÆæÁΩÆÂÖÉÊï∞ÊçÆÂ§ÑÁêÜÁ±ªÂûã(Ë°®Á§∫ÂÖÉÊï∞ÊçÆËæìÂá∫ÂØπË±°, ÂèØ‰ª•Â§ÑÁêÜ‰ªÄ‰πàÊ†∑ÁöÑÊï∞ÊçÆ, ÊØîÂ¶Ç‰∫åÁª¥Á†Å, Êù°ÂΩ¢Á†Å, XXüê¥)
        //    output.availableMetadataObjectTypes, ‰ª£Ë°®ÊääËÉΩÊîØÊåÅÁöÑ, ÈÉΩÊîØÊåÅ‰∏ä, ÂÖ∂ÂÆûÊàë‰ª¨‰ΩøÁî®ÁöÑ‰ªÖ‰ªÖÊòØ‰∫åÁª¥Á†ÅËÄåÂ∑≤(AVMetadataObjectTypeQRCode)
        output.metadataObjectTypes = [AVMetadataObjectTypeQRCode]
        
        previewLayer.frame = inView.bounds;
        inView.layer.insertSublayer(previewLayer, at: 0)
        
        session.startRunning()
    }
    
    /// ÁªìÊùüÊâ´Êèè
    public func endScan() {
        session.stopRunning()
    }
    
    /// ËÆæÁΩÆÂÖ¥Ë∂£ÁÇπ
    public func setOriginRectOfInterest(_ originRect: CGRect) {
        // ËÆæÁΩÆÂÖ¥Ë∂£ÁÇπ
        // Ê≥®ÊÑè: ÊØè‰∏™ÂèÇÊï∞ÁöÑÂèñÂÄºÈÉΩÊòØÂØπÂ∫îÁöÑÊØî‰æã
        // Ê≥®ÊÑè: ÂùêÊ†áÁ≥ª, ÊòØÊ®™Â±èÁä∂ÊÄÅ‰∏ãÁöÑÂùêÊ†áÁ≥ª
        let screenBounds = UIScreen.main.bounds
        let x = originRect.origin.y / screenBounds.size.height
        let y = originRect.origin.x / screenBounds.size.width
        let width = originRect.size.height / screenBounds.size.height
        let height = originRect.size.width / screenBounds.size.width
        let rect = CGRect(x: x, y: y, width: width, height: height)
        output.rectOfInterest = rect
    }
    
    /** ‰ªéÂõæÁâá‰∏≠ËØÜÂà´‰∫åÁª¥Á†Å */
    public func distinguishQRCodeFromImage(_ sourceImage: UIImage, result: QRResultBlock) {
        
        // ÂàõÂª∫‰∏Ä‰∏™‰∏ä‰∏ãÊñá
        let context = CIContext()
        // ÂàõÂª∫‰∏Ä‰∏™Êé¢ÊµãÂô®
        let detector = CIDetector(ofType: CIDetectorTypeQRCode, context: context, options: [CIDetectorAccuracy: CIDetectorAccuracyHigh])
        // ËΩ¨Êç¢ÂéüÂõæÁâá‰∏∫ CIImage
        let image = CIImage(cgImage: sourceImage.cgImage!)
        // Ëé∑ÂèñÊé¢ÊµãÂô®ËØÜÂà´ÁöÑÂú®ÂõæÂÉè‰∏≠ÁöÑÁ±ªÂûã
        let features = detector?.features(in: image)
        
        var results = [String]()
        
        guard features != nil else {
            result(results)
            return
        }
        
        for feature in features!
        {
            guard let resultFeature = feature as? CIQRCodeFeature else { continue }
            results.append(resultFeature.messageString!)
        }
        result(results)
    }
    
    /// ÁîüÊàê‰∫åÁª¥Á†Å
    public func createQRCodeImage(str: String, size: CGFloat, iconImage: UIImage? = nil) -> UIImage? {
        
        // ÂàõÂª∫‰∏Ä‰∏™ÁîüÊàê‰∫åÁª¥Á†ÅÁöÑÊª§Èïú
        guard let filter = CIFilter(name: "CIQRCodeGenerator") else { return nil }
        // ÊÅ¢Â§çÊª§ÈïúÈªòËÆ§ËÆæÁΩÆ
        filter.setDefaults()
        
        // ËÆæÁΩÆÊª§ÈïúÁöÑËæìÂÖ•Êï∞ÊçÆ
        let data = str.data(using: String.Encoding.utf8)
        filter.setValue(data, forKey: "inputMessage")
        
        // ‰ªéÊª§Èïú‰∏≠Ëé∑ÂèñÂõæÁâá
        guard let image = filter.outputImage else { return nil }
        
        let imageUI = createBigImage(image: image, size: size)
        
        return iconImage == nil ? imageUI : createImage(bgImage: imageUI, iconImage: iconImage)!
    }
    
    private func createImage(bgImage: UIImage?, iconImage: UIImage?) -> UIImage?
    {
        if bgImage == nil || iconImage == nil { return nil }
        
        // 1.ÂºÄÂêØÂõæÁâá‰∏ä‰∏ãÊñá
        UIGraphicsBeginImageContext(bgImage!.size)
        // 2.ÁªòÂà∂ËÉåÊôØ
        bgImage!.draw(in: CGRect(origin: CGPoint(), size: bgImage!.size))
        
        // 3.ÁªòÂà∂ÂõæÊ†á
        let w:CGFloat = 50
        let h = w
        let x = (bgImage!.size.width - w) * 0.5
        let y = (bgImage!.size.height - h) * 0.5
        
        iconImage!.draw(in: CGRect(x: x, y: y, width: w, height: h))
        // 4.ÂèñÂá∫ÂõæÁâá
        let newImage = UIGraphicsGetImageFromCurrentImageContext()
        // 5.ÂÖ≥Èó≠‰∏ä‰∏ãÊñá
        UIGraphicsEndImageContext()
        
        return newImage
    }
    
    /// Ê†πÊçÆCIImageÁîüÊàêÊåáÂÆöÂ§ßÂ∞èÁöÑÈ´òÊ∏ÖUIImage
    ///
    /// - Parameters:
    ///   - image: ÊåáÂÆöCIImage
    ///   - size: ÊåáÂÆöÂ§ßÂ∞è
    /// - Returns: ÁîüÊàêÂ•ΩÁöÑÂõæÁâá
    private func createBigImage(image: CIImage, size: CGFloat) -> UIImage {
        
        let extent: CGRect = image.extent.integral
        let scale: CGFloat = min(size/extent.width, size/extent.height)
        
        // 1.ÂàõÂª∫bitmap;
        let width = extent.width * scale
        let height = extent.height * scale
        let cs: CGColorSpace = CGColorSpaceCreateDeviceGray()
        let bitmapRef = CGContext(data: nil, width: Int(width), height: Int(height), bitsPerComponent: 8, bytesPerRow: 0, space: cs, bitmapInfo: 0)!
        
        let context = CIContext(options: nil)
        let bitmapImage: CGImage = context.createCGImage(image, from: extent)!
        
        bitmapRef.interpolationQuality = CGInterpolationQuality.none
        bitmapRef.scaleBy(x: scale, y: scale);
        bitmapRef.draw(bitmapImage, in: extent);
        
        // 2.‰øùÂ≠òbitmapÂà∞ÂõæÁâá
        let scaledImage: CGImage = bitmapRef.makeImage()!
        
        return UIImage(cgImage: scaledImage)
    }
}

// MARK: - AVCaptureMetadataOutputObjectsDelegate
extension QRCodeTool: AVCaptureMetadataOutputObjectsDelegate {

    func captureOutput(_ captureOutput: AVCaptureOutput!, didOutputMetadataObjects metadataObjects: [Any]!, from connection: AVCaptureConnection!) {
        
        var results = [String]()
        
        for result in metadataObjects {
            
            guard let metadataObject = result as? AVMetadataObject else { continue }
            
            let codeObj = previewLayer.transformedMetadataObject(for: metadataObject)
            
            guard let resultCodeObject = codeObj as? AVMetadataMachineReadableCodeObject else { continue }
            
            results.append(resultCodeObject.stringValue)
        }
        
        if resultBlock != nil { resultBlock!(results) }
    }
}
